// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:movie_mania/data/entity/movie/movie.dart';
import 'package:movie_mania/data/entity/movie/movie_genres.dart';
import 'package:movie_mania/data/entity/movie/movie_item.dart';
import 'package:movie_mania/data/entity/movie/movie_production_companies.dart';
import 'package:movie_mania/data/entity/movie/movie_production_countries.dart';
import 'package:movie_mania/data/entity/movie/movie_spoken_languages.dart';
import 'package:movie_mania/data/entity/tv/tv.dart';
import 'package:movie_mania/data/entity/tv/tv_genres.dart';
import 'package:movie_mania/data/entity/tv/tv_last_episode_to_air.dart';
import 'package:movie_mania/data/entity/tv/tv_networks.dart';
import 'package:movie_mania/data/entity/tv/tv_next_episode_to_air.dart';
import 'package:movie_mania/data/entity/tv/tv_production_countries.dart';
import 'package:movie_mania/data/entity/tv/tv_seasons.dart';
import 'package:movie_mania/data/entity/tv/tv_spoken_languages.dart';
import 'package:movie_mania/data/source/network/response/movie/movie_popular_response.dart';
import 'package:movie_mania/data/source/network/response/movie/movie_recommendation_response.dart';
import 'package:movie_mania/data/source/network/response/movie/movie_search_response.dart';
import 'package:movie_mania/data/source/network/response/movie/now_playing_response.dart';
import 'package:movie_mania/data/source/network/response/response_error.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
  static final Map<String, JsonConvertFunction> convertFuncMap = {
    (Movie).toString(): Movie.fromJson,
    (MovieGenres).toString(): MovieGenres.fromJson,
    (MovieItem).toString(): MovieItem.fromJson,
    (MovieProductionCompanies).toString(): MovieProductionCompanies.fromJson,
    (MovieProductionCountries).toString(): MovieProductionCountries.fromJson,
    (MovieSpokenLanguages).toString(): MovieSpokenLanguages.fromJson,
    (Tv).toString(): Tv.fromJson,
    (TvGenres).toString(): TvGenres.fromJson,
    (TvLastEpisodeToAir).toString(): TvLastEpisodeToAir.fromJson,
    (TvNetworks).toString(): TvNetworks.fromJson,
    (TvNextEpisodeToAir).toString(): TvNextEpisodeToAir.fromJson,
    (TvProductionCountries).toString(): TvProductionCountries.fromJson,
    (TvSeasons).toString(): TvSeasons.fromJson,
    (TvSpokenLanguages).toString(): TvSpokenLanguages.fromJson,
    (MoviePopularResponse).toString(): MoviePopularResponse.fromJson,
    (MovieRecommendationResponse).toString():
        MovieRecommendationResponse.fromJson,
    (MovieSearchResponse).toString(): MovieSearchResponse.fromJson,
    (NowPlayingResponse).toString(): NowPlayingResponse.fromJson,
    (NowPlayingResponseDates).toString(): NowPlayingResponseDates.fromJson,
    (ResponseError).toString(): ResponseError.fromJson,
  };

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<Movie>[] is M) {
      return data
          .map<Movie>((Map<String, dynamic> e) => Movie.fromJson(e))
          .toList() as M;
    }
    if (<MovieGenres>[] is M) {
      return data
          .map<MovieGenres>((Map<String, dynamic> e) => MovieGenres.fromJson(e))
          .toList() as M;
    }
    if (<MovieItem>[] is M) {
      return data
          .map<MovieItem>((Map<String, dynamic> e) => MovieItem.fromJson(e))
          .toList() as M;
    }
    if (<MovieProductionCompanies>[] is M) {
      return data
          .map<MovieProductionCompanies>(
              (Map<String, dynamic> e) => MovieProductionCompanies.fromJson(e))
          .toList() as M;
    }
    if (<MovieProductionCountries>[] is M) {
      return data
          .map<MovieProductionCountries>(
              (Map<String, dynamic> e) => MovieProductionCountries.fromJson(e))
          .toList() as M;
    }
    if (<MovieSpokenLanguages>[] is M) {
      return data
          .map<MovieSpokenLanguages>(
              (Map<String, dynamic> e) => MovieSpokenLanguages.fromJson(e))
          .toList() as M;
    }
    if (<Tv>[] is M) {
      return data.map<Tv>((Map<String, dynamic> e) => Tv.fromJson(e)).toList()
          as M;
    }
    if (<TvGenres>[] is M) {
      return data
          .map<TvGenres>((Map<String, dynamic> e) => TvGenres.fromJson(e))
          .toList() as M;
    }
    if (<TvLastEpisodeToAir>[] is M) {
      return data
          .map<TvLastEpisodeToAir>(
              (Map<String, dynamic> e) => TvLastEpisodeToAir.fromJson(e))
          .toList() as M;
    }
    if (<TvNetworks>[] is M) {
      return data
          .map<TvNetworks>((Map<String, dynamic> e) => TvNetworks.fromJson(e))
          .toList() as M;
    }
    if (<TvNextEpisodeToAir>[] is M) {
      return data
          .map<TvNextEpisodeToAir>(
              (Map<String, dynamic> e) => TvNextEpisodeToAir.fromJson(e))
          .toList() as M;
    }
    if (<TvProductionCountries>[] is M) {
      return data
          .map<TvProductionCountries>(
              (Map<String, dynamic> e) => TvProductionCountries.fromJson(e))
          .toList() as M;
    }
    if (<TvSeasons>[] is M) {
      return data
          .map<TvSeasons>((Map<String, dynamic> e) => TvSeasons.fromJson(e))
          .toList() as M;
    }
    if (<TvSpokenLanguages>[] is M) {
      return data
          .map<TvSpokenLanguages>(
              (Map<String, dynamic> e) => TvSpokenLanguages.fromJson(e))
          .toList() as M;
    }
    if (<MoviePopularResponse>[] is M) {
      return data
          .map<MoviePopularResponse>(
              (Map<String, dynamic> e) => MoviePopularResponse.fromJson(e))
          .toList() as M;
    }
    if (<MovieRecommendationResponse>[] is M) {
      return data
          .map<MovieRecommendationResponse>((Map<String, dynamic> e) =>
              MovieRecommendationResponse.fromJson(e))
          .toList() as M;
    }
    if (<MovieSearchResponse>[] is M) {
      return data
          .map<MovieSearchResponse>(
              (Map<String, dynamic> e) => MovieSearchResponse.fromJson(e))
          .toList() as M;
    }
    if (<NowPlayingResponse>[] is M) {
      return data
          .map<NowPlayingResponse>(
              (Map<String, dynamic> e) => NowPlayingResponse.fromJson(e))
          .toList() as M;
    }
    if (<NowPlayingResponseDates>[] is M) {
      return data
          .map<NowPlayingResponseDates>(
              (Map<String, dynamic> e) => NowPlayingResponseDates.fromJson(e))
          .toList() as M;
    }
    if (<ResponseError>[] is M) {
      return data
          .map<ResponseError>(
              (Map<String, dynamic> e) => ResponseError.fromJson(e))
          .toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}